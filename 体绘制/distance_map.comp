#version 430 
layout(local_size_x=8,local_size_y=8)in;
layout(binding=0,r8ui)uniform uimage3D dist;
layout(binding=1,r8ui)uniform uimage3D dist_swap;
uniform int stage;
//raw=(256, 256, 225)
//block_Size=(4,4,4)
//glbalInvocation=(64,64,56)
//localInvocation=(8,8,8)
//numsoflocalworkgroups=(8,8,7)
//occupancy_map=(64,64,56)
const uint OCCUPIED=0;
const uint EMPTY=1;
uint occupancy_to_max_dist(uint occupancy){
	return occupancy==OCCUPIED?0:255;
}

void main(){
	ivec3 pos;
	if(stage==0){
	pos=ivec3(0,gl_GlobalInvocationID.x,gl_GlobalInvocationID.y);
	}else if(stage==1){
	pos=ivec3(gl_GlobalInvocationID.x,0,gl_GlobalInvocationID.y);
	}else{
	pos=ivec3(gl_GlobalInvocationID.x,gl_GlobalInvocationID.y,0);
	}
	const ivec3 dim=imageSize(dist);
	if(any(greaterThanEqual(pos,dim)))return;
	if(stage==0){
		//forward
		uint gi1jk=occupancy_to_max_dist(imageLoad(dist_swap,ivec3(0,pos.y,pos.z)).x);
		for(int x=0;x<dim.x;++x){
		ivec3 p=ivec3(x,pos.y,pos.z);
		uint gijk=occupancy_to_max_dist(imageLoad(dist_swap,p).x);
		uint gijk_new=min(gi1jk+1,gijk);
		imageStore(dist,p,ivec4(gijk_new));
		gi1jk=gijk_new;
		}
		//backward
		gi1jk=imageLoad(dist,ivec3(dim.x-1,pos.y,pos.z)).x;
		for(int x=dim.x-2;x>=0;--x){
			ivec3 p=ivec3(x,pos.y,pos.z);
			uint gijk=imageLoad(dist,p).x;
			uint gijk_new=min(gi1jk+1,gijk);
			imageStore(dist,p,ivec4(gijk_new));
			gi1jk=gijk_new;
		}
	}
	else if(stage==1){
        for (int y = 0; y < dim.y; ++y) {
          ivec3 p = ivec3(pos.x, y, pos.z);
          uint gijk = imageLoad(dist, p).x;
          uint m_min = gijk;
          // zigzag out from the voxel of interest, stop as soon as any future voxels
          // are guaranteed to return a higher distance
          for (int n = 1; n < m_min && n < 255; ++n) {
            if (y >= n) {
              const uint gijnk = imageLoad(dist, ivec3(pos.x, y - n, pos.z)).x;
              const uint m = max(n, gijnk);
              if (m < m_min)
                m_min = m;
            }
            if ((y + n) < dim.y && n < m_min) { // note early exit possible
              const uint gijnk = imageLoad(dist, ivec3(pos.x, y + n, pos.z)).x;
              const uint m = max(n, gijnk);
              if (m < m_min)
                m_min = m;
            }
          }
          imageStore(dist_swap, p, ivec4(m_min));
        }
	}
	else if(stage==2){
	        // same as transformation 2 but on the z axis
        for (int z = 0; z < dim.z; ++z) {
          ivec3 p = ivec3(pos.x, pos.y, z);
          uint gijk = imageLoad(dist_swap, p).x;
          uint m_min = gijk;
          for (int n = 1; n < m_min && n < 255; ++n) {
            if (z >= n) {
              const uint gijnk = imageLoad(dist_swap, ivec3(pos.x, pos.y, z - n)).x;
              const uint m = max(n, gijnk);
              if (m < m_min)
                m_min = m;
            }
            if ((z + n) < dim.z && n < m_min) { // note early exit possible
              const uint gijnk = imageLoad(dist_swap, ivec3(pos.x, pos.y, z + n)).x;
              const uint m = max(n, gijnk);
              if (m < m_min)
                m_min = m;
            }
          }
          imageStore(dist, p, ivec4(m_min));
        }


	}



}